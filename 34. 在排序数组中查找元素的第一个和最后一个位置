class Solution {
    private int searchBound(int[] nums, int target, boolean dirLeft){
        int left = 0;
        int right = nums.length;
        while (left < right){
            int mid = (left + right) / 2;
            if (nums[mid] == target){
                if (dirLeft) right = mid;
                else left = mid + 1;
            } else if (nums[mid] < target){
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }

    public int[] searchRange(int[] nums, int target) {
        int[] range = {-1, -1};
        if (nums.length == 0 || nums == null) return range;
        int leftBound = searchBound(nums, target, true);
        int rightBound = searchBound(nums, target, false) - 1;
        if (leftBound >= nums.length || nums[leftBound] != target) return range;
        range[0] = leftBound;
        range[1] = rightBound;
        return range;
    }
}
