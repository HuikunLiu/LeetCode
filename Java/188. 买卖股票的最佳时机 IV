class Solution {
    public int maxProfit(int k, int[] prices) {
        if (prices.length <  2) return 0;
        if (k < 1) return 0;
        if (k >= prices.length / 2){
            int maxProf = 0;
            for (int i = 1; i < prices.length; i++){
                if (prices[i] > prices [i - 1]){
                    maxProf += prices[i] - prices[i - 1];
                }
            }
            return maxProf;
        }
        int[][] dp = new int[k][2];
        dp[0][0] = - prices[0];
        dp[0][1] = Integer.MIN_VALUE;
        for (int i = 1; i < k; i ++){
            dp[i][0] = Integer.MIN_VALUE;
            dp[i][1] = Integer.MIN_VALUE;
        }
        for (int i = 1; i < prices.length; i++){
            //first buy
            dp[0][0] = Math.max(dp[0][0], 0 - prices[i]); 
            //first sell
            dp[0][1] = Math.max(dp[0][1], dp[0][0] + prices[i]); 
            for (int j = 1; j < k; j++){
                //buy
                dp[j][0] = Math.max(dp[j][0], dp[j - 1][1] - prices[i]);
                //sell
                dp[j][1] = Math.max(dp[j][1], dp[j][0] + prices[i]);
            }
        }
        return Math.max(0, dp[k - 1][1]);

    }
}
